# vim: set filetype=python:


import os
import sys
import re
import platform
import subprocess

import lit.util
import lit.formats
from lit.llvm import llvm_config
from lit.llvm.subst import FindTool
from lit.llvm.subst import ToolSubst

config.name = "allvm"

config.llvm_src_root = "@LLVM_SOURCE_DIR@"
config.llvm_obj_root = "@LLVM_BINARY_DIR@"
config.llvm_tools_dir = "@LLVM_TOOLS_DIR@"
config.llvm_libs_dir = "@LLVM_LIBS_DIR@"

config.allvm_obj_root = "@ALLVM_BINARY_DIR@";
config.allvm_libs_dir = "@LLVM_LIBRARY_OUTPUT_INTDIR@"
config.allvm_tools_dir = "@LLVM_RUNTIME_OUTPUT_INTDIR@"

config.target_triple = "@TARGET_TRIPLE@"
config.python_executable = "@PYTHON_EXECUTABLE@"

# testFormat: The test format to use to interpret tests.
config.test_format = lit.formats.ShTest(True) # not llvm_config.use_lit_shell)

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root path where tests should be run.
config.test_exec_root = os.path.join(config.allvm_obj_root, 'test')

# suffixes: A list of file extensions to treat as test files. This is overriden
# by individual lit.local.cfg files in the test subdirectories.
config.suffixes = ['.ll', '.c', '.cxx', '.test', '.txt', '.s', '.mir']

# excludes: A list of directories to exclude from the testsuite. The 'Inputs'
# subdirectories contain auxiliary inputs for various tests in their parent
# directories.
config.excludes = ['Inputs']

# Propagate some variables from the host environment.
#llvm_config.with_system_environment(
#    ['HOME', 'INCLUDE', 'LIB', 'TMP', 'TEMP', 'ASAN_SYMBOLIZER_PATH', 'MSAN_SYMBOLIZER_PATH'])

#newpath = config.allvm_tools_dir "@LLVM_RUNTIME_OUTPUT_INTDIR@:@LLVM_TOOLS_BINARY_DIR@"
#curpath = os.environ.get('PATH', '')
#if curpath:
#    newpath += ":" + curpath
#config.environment['PATH'] = newpath
config.environment['XDG_CACHE_HOME'] = config.test_exec_root + "/cache";

# TODO: Get this more reliably/directly: " = @LIBNONE_PATH@" or something
libnone = "@LLVM_LIBRARY_OUTPUT_INTDIR@/libnone.a"

config.substitutions.append( ('%libnone', libnone) )
config.substitutions.append( ('%alley', "@LLVM_RUNTIME_OUTPUT_INTDIR@/alley") )

#libpath = os.environ.get('LD_LIBRARY_PATH', '')
#if libpath:
#    libpath = ":" + libpath
#config.environment['LD_LIBRARY_PATH'] = "@OBJDIR@/prefix/lib" + libpath

# LLVM can be configured with an empty default triple
# Some tests are "generic" and require a valid default triple
if config.target_triple:
    config.available_features.add('default_triple')

# Ask llvm-config about asserts and global-isel.
#llvm_config.feature_config(
#    [('--assertion-mode', {'ON': 'asserts'}),
#     ('--has-global-isel', {'ON': 'global-isel'})])
#
## .debug_frame is not emitted for targeting Windows x64.
#if not re.match(r'^x86_64.*-(mingw32|windows-gnu|win32)', config.target_triple):
#    config.available_features.add('debug_frame')
