From fe61a7aa53e68e8a17b5eb8d502e6fa314139ced Mon Sep 17 00:00:00 2001
From: Rich Felker <dalias@aerifal.cx>
Date: Mon, 10 Sep 2018 16:13:29 -0400
Subject: [PATCH] rework mechanism for posix_spawnp calling posix_spawn

previously, a common __posix_spawnx backend was used that accepted an
additional argument for the execve variant to call in the child. this
moderately bloated up the posix_spawn function, shuffling arguments
between stack and/or registers to call a 7-argument function from a
6-argument one.

instead, tuck the exec function pointer in an unused part of the
(large) pthread_spawnattr_t structure, and have posix_spawnp duplicate
the attributes and fill in a pointer to __execvpe. the net code size
change is minimal, but the weight is shifted to the "heavier" function
which already pulls in more dependencies.

as a bonus, we get rid of an external symbol (__posix_spawnx) that had
no really good place for a declaration because it shouldn't have
existed to begin with.
---
 include/spawn.h            |  4 +++-
 src/process/posix_spawn.c  | 18 +++++-------------
 src/process/posix_spawnp.c | 10 ++++------
 3 files changed, 12 insertions(+), 20 deletions(-)

diff --git a/include/spawn.h b/include/spawn.h
index bba57ce4..c9bd1939 100644
--- a/include/spawn.h
+++ b/include/spawn.h
@@ -28,7 +28,9 @@ typedef struct {
 	int __flags;
 	pid_t __pgrp;
 	sigset_t __def, __mask;
-	int __prio, __pol, __pad[16];
+	int __prio, __pol;
+	void *__fn;
+	char __pad[64-sizeof(void *)];
 } posix_spawnattr_t;
 
 typedef struct {
diff --git a/src/process/posix_spawn.c b/src/process/posix_spawn.c
index 93fb1555..16308fb7 100644
--- a/src/process/posix_spawn.c
+++ b/src/process/posix_spawn.c
@@ -14,7 +14,6 @@ struct args {
 	int p[2];
 	sigset_t oldmask;
 	const char *path;
-	int (*exec)(const char *, char *const *, char *const *);
 	const posix_spawn_file_actions_t *fa;
 	const posix_spawnattr_t *restrict attr;
 	char *const *argv, *const *envp;
@@ -138,7 +137,10 @@ static int child(void *args_vp)
 	pthread_sigmask(SIG_SETMASK, (attr->__flags & POSIX_SPAWN_SETSIGMASK)
 		? &attr->__mask : &args->oldmask, 0);
 
-	args->exec(args->path, args->argv, args->envp);
+	int (*exec)(const char *, char *const *, char *const *) =
+		attr->__fn ? (int (*)())attr->__fn : execve;
+
+	exec(args->path, args->argv, args->envp);
 	ret = -errno;
 
 fail:
@@ -149,8 +151,7 @@ fail:
 }
 
 
-int __posix_spawnx(pid_t *restrict res, const char *restrict path,
-	int (*exec)(const char *, char *const *, char *const *),
+int posix_spawn(pid_t *restrict res, const char *restrict path,
 	const posix_spawn_file_actions_t *fa,
 	const posix_spawnattr_t *restrict attr,
 	char *const argv[restrict], char *const envp[restrict])
@@ -166,7 +167,6 @@ int __posix_spawnx(pid_t *restrict res, const char *restrict path,
 	pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &cs);
 
 	args.path = path;
-	args.exec = exec;
 	args.fa = fa;
 	args.attr = attr ? attr : &(const posix_spawnattr_t){0};
 	args.argv = argv;
@@ -193,11 +193,3 @@ int __posix_spawnx(pid_t *restrict res, const char *restrict path,
 
 	return ec;
 }
-
-int posix_spawn(pid_t *restrict res, const char *restrict path,
-	const posix_spawn_file_actions_t *fa,
-	const posix_spawnattr_t *restrict attr,
-	char *const argv[restrict], char *const envp[restrict])
-{
-	return __posix_spawnx(res, path, execve, fa, attr, argv, envp);
-}
diff --git a/src/process/posix_spawnp.c b/src/process/posix_spawnp.c
index 37360001..165be746 100644
--- a/src/process/posix_spawnp.c
+++ b/src/process/posix_spawnp.c
@@ -3,15 +3,13 @@
 
 int __execvpe(const char *, char *const *, char *const *);
 
-int __posix_spawnx(pid_t *restrict, const char *restrict,
-	int (*)(const char *, char *const *, char *const *),
-	const posix_spawn_file_actions_t *,
-	const posix_spawnattr_t *restrict, char *const *restrict, char *const *restrict);
-
 int posix_spawnp(pid_t *restrict res, const char *restrict file,
 	const posix_spawn_file_actions_t *fa,
 	const posix_spawnattr_t *restrict attr,
 	char *const argv[restrict], char *const envp[restrict])
 {
-	return __posix_spawnx(res, file, __execvpe, fa, attr, argv, envp);
+	posix_spawnattr_t spawnp_attr = { 0 };
+	if (attr) spawnp_attr = *attr;
+	spawnp_attr.__fn = (void *)__execvpe;	
+	return posix_spawn(res, file, fa, &spawnp_attr, argv, envp);
 }
-- 
2.19.0

